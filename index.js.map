{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export type DataTreeIterator = (child: DataTree) => void;\n\nexport interface DataTreeJSON {\n  children: DataTreeJSON[];\n  data: any;\n}\n\nexport default class DataTree {\n\n  children: DataTree[] = [];\n\n  constructor(public data: any,\n              public parent?: DataTree) {}\n\n  add(child: DataTree): boolean {\n    if (this.has(child)) {\n      return false;\n    }\n    return this.children.push(child) > 0;\n  }\n\n  remove(child: DataTree): boolean {\n    let index = this.children.indexOf(child);\n    if (index === -1) {\n      return false;\n    }\n    this.children.splice(index, 1);\n    return true;\n  }\n\n  has(child: DataTree): boolean {\n    return this.children.indexOf(child) !== -1;\n  }\n\n  forEach(callback: DataTreeIterator): void {\n    let queue: DataTree[] = [this];\n    let curr: DataTree;\n    while (queue.length > 0) {\n      curr = queue.shift();\n      curr.children.forEach(child => queue.push(child));\n      callback.call(this, curr);\n    }\n  }\n\n  filter(callback: DataTreeIterator): DataTree[] {\n    let result: DataTree[] = [];\n    this.forEach( child => {\n      if (callback.call(this, child)) {\n        result.push(child);\n      }\n    });\n    return result;\n  }\n\n  find(callback: DataTreeIterator): DataTree | null {\n    let queue: DataTree[] = [this];\n    let curr: DataTree;\n    while (queue.length > 0) {\n      curr = queue.shift();\n      curr.children.forEach(child => queue.push(child));\n      if (callback.call(this, curr)) {\n        return curr;\n      }\n    }\n    return null;\n  }\n\n  some(callback: DataTreeIterator): boolean {\n    return this.find(callback) !== null;\n  }\n\n  every(callback: DataTreeIterator): boolean {\n    let queue: DataTree[] = [this];\n    let curr: DataTree;\n    while (queue.length > 0) {\n      curr = queue.shift();\n      curr.children.forEach(child => queue.push(child));\n      if (!callback.call(this, curr)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * It's will try to stringfiy data.\n   */\n  toJSON(): DataTreeJSON {\n    return {\n      children: this.children.map( child => child.toJSON()),\n      data: toString.call(this.data)\n    };\n  }\n\n}\n"]}